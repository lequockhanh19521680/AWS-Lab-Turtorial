# User Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: what-if-generator
  labels:
    app: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: what-if-generator/user-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: NODE_ENV
        - name: PORT
          value: "3001"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: POSTGRES_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: POSTGRES_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: JWT_SECRET
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_PORT
        - name: EMAIL_USER
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: email-user
        - name: EMAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: email-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: what-if-generator
  labels:
    app: user-service
spec:
  selector:
    app: user-service
  ports:
    - port: 3001
      targetPort: 3001
  type: ClusterIP
---
# Generation Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: generation-service
  namespace: what-if-generator
  labels:
    app: generation-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: generation-service
  template:
    metadata:
      labels:
        app: generation-service
    spec:
      containers:
      - name: generation-service
        image: what-if-generator/generation-service:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: NODE_ENV
        - name: PORT
          value: "3002"
        - name: AI_PROVIDER
          value: "gemini"
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: gemini-api-key
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_PORT
        - name: HISTORY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: HISTORY_SERVICE_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: generation-service
  namespace: what-if-generator
  labels:
    app: generation-service
spec:
  selector:
    app: generation-service
  ports:
    - port: 3002
      targetPort: 3002
  type: ClusterIP
---
# History Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: history-service
  namespace: what-if-generator
  labels:
    app: history-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: history-service
  template:
    metadata:
      labels:
        app: history-service
    spec:
      containers:
      - name: history-service
        image: what-if-generator/history-service:latest
        ports:
        - containerPort: 3003
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: NODE_ENV
        - name: PORT
          value: "3003"
        - name: MONGODB_URI
          value: "mongodb://$(MONGODB_USER):$(MONGODB_PASSWORD)@$(MONGODB_HOST):$(MONGODB_PORT)/what_if_history?authSource=admin"
        - name: MONGODB_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_HOST
        - name: MONGODB_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_PORT
        - name: MONGODB_USER
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_USER
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: mongodb-password
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_PORT
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: history-service
  namespace: what-if-generator
  labels:
    app: history-service
spec:
  selector:
    app: history-service
  ports:
    - port: 3003
      targetPort: 3003
  type: ClusterIP
---
# Sharing Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sharing-service
  namespace: what-if-generator
  labels:
    app: sharing-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sharing-service
  template:
    metadata:
      labels:
        app: sharing-service
    spec:
      containers:
      - name: sharing-service
        image: what-if-generator/sharing-service:latest
        ports:
        - containerPort: 3004
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: NODE_ENV
        - name: PORT
          value: "3004"
        - name: MONGODB_URI
          value: "mongodb://$(MONGODB_USER):$(MONGODB_PASSWORD)@$(MONGODB_HOST):$(MONGODB_PORT)/what_if_sharing?authSource=admin"
        - name: MONGODB_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_HOST
        - name: MONGODB_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_PORT
        - name: MONGODB_USER
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: MONGODB_USER
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: what-if-secrets
              key: mongodb-password
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_PORT
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: JWT_SECRET
        - name: HISTORY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: HISTORY_SERVICE_URL
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: FRONTEND_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: sharing-service
  namespace: what-if-generator
  labels:
    app: sharing-service
spec:
  selector:
    app: sharing-service
  ports:
    - port: 3004
      targetPort: 3004
  type: ClusterIP
---
# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: what-if-generator
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: what-if-generator/api-gateway:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: NODE_ENV
        - name: PORT
          value: "3000"
        - name: USER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: USER_SERVICE_URL
        - name: GENERATION_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: GENERATION_SERVICE_URL
        - name: HISTORY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: HISTORY_SERVICE_URL
        - name: SHARING_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: SHARING_SERVICE_URL
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: JWT_SECRET
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: REDIS_PORT
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: FRONTEND_URL
        - name: RATE_LIMIT_WINDOW_MS
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: RATE_LIMIT_WINDOW_MS
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: RATE_LIMIT_MAX_REQUESTS
        - name: ENABLE_API_DOCS
          valueFrom:
            configMapKeyRef:
              name: what-if-config
              key: ENABLE_API_DOCS
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: what-if-generator
  labels:
    app: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer
---
# Ingress for external access (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: what-if-generator-ingress
  namespace: what-if-generator
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, PATCH, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  rules:
  - host: api.whatifgenerator.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 3000