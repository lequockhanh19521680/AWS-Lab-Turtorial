version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: what-if-postgres
    environment:
      POSTGRES_DB: what_if_users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - what-if-network

  # DynamoDB Local (replaces MongoDB)
  dynamodb:
    image: amazon/dynamodb-local:latest
    container_name: what-if-dynamodb
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    ports:
      - "8000:8000"
    networks:
      - what-if-network

  # MongoDB (legacy - will be removed after migration)
  mongodb:
    image: mongo:7-jammy
    container_name: what-if-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: what_if_history
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - what-if-network
    profiles:
      - legacy

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: what-if-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - what-if-network

  # Microservices
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: what-if-user-service
    env_file:
      - .env.development
    environment:
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    networks:
      - what-if-network

  generation-service:
    build:
      context: ./services/generation-service
      dockerfile: Dockerfile
    container_name: what-if-generation-service
    env_file:
      - .env.development
    environment:
      PORT: 3002
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      REDIS_URL: redis://redis:6379
      HISTORY_SERVICE_URL: http://history-service:3003
    ports:
      - "3002:3002"
    depends_on:
      - redis
    volumes:
      - ./services/generation-service:/app
      - /app/node_modules
    networks:
      - what-if-network

  history-service:
    build:
      context: ./services/history-service
      dockerfile: Dockerfile
    container_name: what-if-history-service
    env_file:
      - .env.development
    environment:
      PORT: 3003
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      DYNAMODB_REGION: ${DYNAMODB_REGION}
      REDIS_URL: redis://redis:6379
    ports:
      - "3003:3003"
    depends_on:
      - dynamodb
      - redis
    volumes:
      - ./services/history-service:/app
      - /app/node_modules
    networks:
      - what-if-network

  sharing-service:
    build:
      context: ./services/sharing-service
      dockerfile: Dockerfile
    container_name: what-if-sharing-service
    env_file:
      - .env.development
    environment:
      PORT: 3004
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      DYNAMODB_REGION: ${DYNAMODB_REGION}
      REDIS_URL: redis://redis:6379
    ports:
      - "3004:3004"
    depends_on:
      - dynamodb
      - redis
    volumes:
      - ./services/sharing-service:/app
      - /app/node_modules
    networks:
      - what-if-network

  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    container_name: what-if-video-service
    env_file:
      - .env.development
    environment:
      PORT: 3005
      REDIS_URL: redis://redis:6379
      USER_SERVICE_URL: http://user-service:3001
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/service-account-key.json
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      RUNWAY_API_KEY: ${RUNWAY_API_KEY}
      PIKA_API_KEY: ${PIKA_API_KEY}
      STABILITY_API_KEY: ${STABILITY_API_KEY}
    ports:
      - "3005:3005"
    depends_on:
      - redis
    volumes:
      - ./services/video-service:/app
      - /app/node_modules
      - video_outputs:/app/outputs
      - video_uploads:/app/uploads
      - video_temp:/app/temp
      # Mount Google Cloud credentials (create this file)
      - ./credentials:/app/credentials:ro
    networks:
      - what-if-network

  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
    container_name: what-if-social-service
    env_file:
      - .env.development
    environment:
      PORT: 3006
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      DYNAMODB_REGION: ${DYNAMODB_REGION}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3001
    ports:
      - "3006:3006"
    depends_on:
      - dynamodb
      - redis
    volumes:
      - ./services/social-service:/app
      - /app/node_modules
    networks:
      - what-if-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: what-if-api-gateway
    env_file:
      - .env.development
    environment:
      PORT: 3000
      USER_SERVICE_URL: http://user-service:3001
      GENERATION_SERVICE_URL: http://generation-service:3002
      HISTORY_SERVICE_URL: http://history-service:3003
      SHARING_SERVICE_URL: http://sharing-service:3004
      VIDEO_SERVICE_URL: http://video-service:3005
      SOCIAL_SERVICE_URL: http://social-service:3006
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - generation-service
      - history-service
      - sharing-service
      - video-service
      - social-service
      - redis
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    networks:
      - what-if-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: what-if-frontend
    env_file:
      - .env.development
    environment:
      PORT: 3007
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
      REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT:-development}
    ports:
      - "3007:3007"
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - what-if-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  video_outputs:
  video_uploads:
  video_temp:

networks:
  what-if-network:
    driver: bridge